'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var isEmpty = function (value) {
    var isArray = Array.isArray(value);
    var empty = false;
    if (isArray) {
        empty = !value.length;
    }
    else {
        empty = !Object.keys(value).length;
    }
    return empty;
};
var generateInitialData = function (config) {
    var formData = {};
    for (var prop in config) {
        var fieldState = config[prop];
        var hasValue = fieldState.hasOwnProperty("value");
        formData[prop] = {
            value: hasValue ? fieldState.value : ""
        };
        if (fieldState.hasOwnProperty("valid")) {
            formData[prop].valid = fieldState.valid;
        }
        if (fieldState.hasOwnProperty("disabled")) {
            formData[prop].disabled = fieldState.disabled;
        }
        if (fieldState.hasOwnProperty("required")) {
            formData[prop].required = fieldState.required;
        }
    }
    return formData;
};
var checkForFalsyValues = function (value) {
    var invalid = false;
    switch (typeof value) {
        case "number":
            invalid = value < 0;
            break;
        case "string":
            invalid = !value.length;
            break;
        default:
            invalid =
                typeof value === undefined || typeof value === null || isEmpty(value);
            break;
    }
    return invalid;
};

var useForm = function (config, initialValidation) {
    if (initialValidation === void 0) { initialValidation = false; }
    var _a = react.useState(false), valid = _a[0], setValid = _a[1];
    var _b = react.useState(generateInitialData(config)), data = _b[0], setData = _b[1];
    /**
     * Run full form validation on mount when initialValidation is true
     */
    react.useEffect(function () {
        if (initialValidation) {
            runFullValidation();
        }
    }, []);
    /**
     * Validate the form without checking each field's validity
     * *** only already validated fields will be counted ***
     */
    react.useEffect(function () {
        runShallowValidation();
    }, [data]);
    /**
     * On blur delete the value of an invalid field if it's not required
     */
    var handleBlur = function (e) {
        var name = e.target.name;
        var event = __assign({}, e);
        event.target.value = event.target.value.trim();
        var fieldState = config[name];
        var validity = validateField(name, event.target.value);
        if (!fieldState.required && validity.valid === false) {
            event.target.value = "";
        }
        handleChange(event);
    };
    /**
     * Update the form data when input's value changes
     */
    var handleChange = function (e) {
        var _a;
        var _b = e.target, name = _b.name, value = _b.value;
        if (name) {
            var validity = validateField(name, value);
            setData(__assign(__assign({}, data), (_a = {}, _a[name] = __assign({ value: value }, validity), _a)));
        }
    };
    var getValues = function () {
        var formValues = {};
        for (var prop in data) {
            formValues[prop] = data[prop].value;
        }
        return formValues;
    };
    var getFields = function () {
        return data;
    };
    var reset = function () {
        var newData = generateInitialData(config);
        setData(newData);
    };
    /**
     * Validate each field's rules and update global validity state
     */
    var runFullValidation = function () {
        var currentData = data;
        var validatedData = {};
        for (var prop in currentData) {
            var value = currentData[prop].value;
            var validity = validateField(prop, value);
            validatedData[prop] = __assign(__assign({}, currentData[prop]), validity);
        }
        var valid = validateAllFields(validatedData);
        setData(validatedData);
        setValid(valid);
        return valid;
    };
    /**
     * Update global validity state with validation values from the state
     */
    var runShallowValidation = function () {
        var valid = validateAllFields();
        setValid(valid);
    };
    /**
     * Update each field's values
     */
    var setFields = function (data) {
        var newData = __assign({}, data);
        for (var prop in data) {
            var validity = validateField(prop, data[prop]);
            if (newData[prop]) {
                newData[prop] = __assign(__assign({}, validity), { value: data[prop] });
            }
        }
        setData(newData);
    };
    /**
     * Shallow validate all fields and return global valid property
     */
    var validateAllFields = function (DATA) {
        var fields;
        if (DATA) {
            fields = Object.values(DATA);
        }
        else {
            fields = Object.values(data);
        }
        return !fields.some(function (field) { return field.valid === false; });
    };
    /**
     * Validate a single field
     */
    var validateField = function (name, value) {
        var _a = config[name], validators = _a.validators, required = _a.required;
        var validity = {};
        var isFalsyValue = checkForFalsyValues(value);
        if (validators && !!value) {
            var errors = validators.filter(function (rule) { return !rule(value).valid; });
            if (errors.length) {
                validity = errors[0](value);
            }
        }
        else if (required && isFalsyValue) {
            validity = {
                errorMsg: "This field is required",
                valid: false
            };
        }
        return validity;
    };
    return {
        getValues: getValues,
        getFields: getFields,
        handleBlur: handleBlur,
        handleChange: handleChange,
        reset: reset,
        setFields: setFields,
        valid: valid,
        validate: runFullValidation
    };
};

exports.useForm = useForm;
